name: CMake (rapid build on push)

  #on:
  #push:
  #tags:
#- v*
on:
  push:
    branches:
      - 'develop'

env:
  BUILD_TYPE: Release

jobs:
  build_on_OSs:
    name:
      Build on ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: ["windows-latest", "macos-latest", "ubuntu-latest"]
        cpp_standard: [20]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout libsbml
        uses: actions/checkout@v3
        with:
          repository: sbmlteam/libsbml

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Add msbuild to PATH on Windows
        if: matrix.platform == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1.6.0

      - name: Cache dependencies on Windows
        if: matrix.platform == 'windows-latest'
        id: cache-win-dependencies-static-for-libsbml
        uses: actions/cache@v3
        with:
          path: |
            ./dependencies
          key: ${{ runner.os }}-dependencies-static-for-libsbml

      - name: Download pre-built dependencies for libsbml on Windows
        if: matrix.platform == 'windows-latest' && steps.cache-win-dependencies-static-for-libsbml.outputs.cache-hit != 'true'
        shell: bash
        run: |
          curl -L https://github.com/sbmlteam/libSBML-dependencies/releases/download/latest/libSBML-dependencies-1.0.1-x64-Release-static.zip > dependencies.zip
          unzip dependencies.zip
          mv libSBML-dependencies-1.0.1-x64-Release-static dependencies

      - name: Add libsbml install directory to path on Windows
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          echo "D:/a/libsbmlnetwork/install-libsbml/lib/cmake" >> $GITHUB_PATH
          echo "D:/a/libsbmlnetwork/libsbmlnetwork/dependencies" >> $GITHUB_PATH
          echo "D:/a/libsbmlnetwork/libsbmlnetwork/dependencies/lib" >> $GITHUB_PATH
          echo "D:/a/libsbmlnetwork/libsbmlnetwork/dependencies/include" >> $GITHUB_PATH
          echo "D:/a/libsbmlnetwork/libsbmlnetwork/dependencies/include/libxml" >> $GITHUB_PATH
          echo "D:/a/libsbmlnetwork/libsbmlnetwork/dependencies/include/libxml2" >> $GITHUB_PATH

      - name: Install dependencies on Ubuntu
        if: matrix.platform == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y check ccache
          git clone https://github.com/libexpat/libexpat
          cmake -G Ninja -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DEXPAT_BUILD_TESTS=OFF -DEXPAT_BUILD_TOOLS=OFF -DEXPAT_BUILD_EXAMPLES=OFF -DEXPAT_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=./dependencies -B libexpat -S libexpat/expat 
          cmake --build libexpat
          cmake --install libexpat

      - name: Add libsbml install directory to path on Ubuntu
        if: matrix.platform == 'ubuntu-latest'
        shell: bash
        run: |
          echo "${{runner.workspace}}/install-libsbml/lib/cmake" >> $GITHUB_PATH

      - name: Install dependencies on macOS
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          brew install check ccache

      - name: Add libsbml install directory to path on macOS
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          echo "${{runner.workspace}}/install-libsbml/lib/cmake" >> $GITHUB_PATH

      - name: Prepare ccache timestamp on non-Windows
        if: matrix.platform != 'windows-latest'
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - name: Set ccache cache directory on non-Windows
        if: matrix.platform != 'windows-latest'
        shell: bash
        run: |
          echo "CCACHE_DIR=${{runner.workspace}}/.ccache" >> "${GITHUB_ENV}"
          echo "COMPILER_LAUNCHER=ccache" >> "${GITHUB_ENV}"

      - name: Cache ccache files on non-Windows
        if: matrix.platform != 'windows-latest'
        uses: actions/cache@v3
        with:
          path: ${{runner.workspace}}/.ccache
          key:
            ${{ runner.os }}-${{ steps.ccache_cache_timestamp.outputs.timestamp
            }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
            ${{ runner.os }}-

      - name: Create libsbml build directory
        run: cmake -E make_directory ${{runner.workspace}}/build-libsbml

      - name: Configure CMake for libsbml
        shell: bash
        working-directory: ${{runner.workspace}}/build-libsbml
        run: |
          cmake $GITHUB_WORKSPACE \
          -G "Ninja" \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DCMAKE_C_COMPILER_LAUNCHER=${COMPILER_LAUNCHER} \
          -DCMAKE_CXX_COMPILER_LAUNCHER=${COMPILER_LAUNCHER} \
          -DCMAKE_CXX_STANDARD=${{matrix.cpp_standard}} \
          -DWITH_CHECK=True \
          -DWITH_LIBXML=ON \
          -DENABLE_LAYOUT="ON" \
          -DENABLE_RENDER="ON" \
          -DCMAKE_INSTALL_PREFIX="${{runner.workspace}}/install-libsbml"

      - name: Build and Install libsbml
        working-directory: ${{runner.workspace}}/build-libsbml
        shell: bash
        run: |
          cmake --build . --target install --config $BUILD_TYPE

      - name: Checkout libBMLNetwork
        uses: actions/checkout@v3
        with:
          repository: adelhpour/libsbmlnetwork

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Setup Python
        uses: actions/setup-python@v4

      - name: Cache dependencies on Windows
        if: matrix.platform == 'windows-latest'
        id: cache-win-dependencies-static-for-libsbmlnetwork
        uses: actions/cache@v3
        with:
          path: |
            ./dependencies
          key: ${{ runner.os }}-dependencies-static

      - name: Download pre-built dependencies on Windows
        if: matrix.platform == 'windows-latest' && steps.cache-win-dependencies-static-for-libsbmlnetwork.outputs.cache-hit != 'true'
        shell: bash
        run: |
          curl -L https://github.com/sbmlteam/libSBML-dependencies/releases/download/latest/libSBML-dependencies-1.0.1-x64-Release-static.zip > dependencies.zip
          unzip dependencies.zip
          mv libSBML-dependencies-1.0.1-x64-Release-static dependencies

      - name: Add Windows dependencies to PATH
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          echo "D:/a/libsbmlnetwork/libsbmlnetwork/dependencies" >> "${GITHUB_PATH}"
          echo "D:/a/libsbmlnetwork/install-libsbml/lib/cmake" >> $GITHUB_PATH
          echo "D:/a/libsbmlnetwork/libsbmlnetwork/dependencies" >> $GITHUB_PATH
          echo "D:/a/libsbmlnetwork/libsbmlnetwork/dependencies/lib" >> $GITHUB_PATH
          echo "D:/a/libsbmlnetwork/libsbmlnetwork/dependencies/include" >> $GITHUB_PATH
          echo "D:/a/libsbmlnetwork/libsbmlnetwork/dependencies/include/libxml" >> $GITHUB_PATH
          ls D:/a/libsbmlnetwork
          echo "D:/a/libsbmlnetwork/libsbmlnetwork"
          ls "D:/a/libsbmlnetwork/libsbmlnetwork"
          echo "D:/a/libsbmlnetwork/libsbmlnetwork/dependencies"
          ls "D:/a/libsbmlnetwork/libsbmlnetwork/dependencies"

      - name: Create libBMLNetwork build directory
        run: cmake -E make_directory ${{runner.workspace}}/build-libsbmlnetwork

      - name: Configure CMake for libBMLNetwork
        shell: bash
        working-directory: ${{runner.workspace}}/build-libsbmlnetwork
        run: |
          cmake $GITHUB_WORKSPACE \
          -G "Ninja" \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DCMAKE_C_COMPILER_LAUNCHER=${COMPILER_LAUNCHER} \
          -DCMAKE_CXX_COMPILER_LAUNCHER=${COMPILER_LAUNCHER} \
          -DCMAKE_CXX_STANDARD=${{matrix.cpp_standard}} \
          -DWITH_PYTHON="ON" \
          -DPYTHON_INSTALL_WITH_SETUP="ON" \
          -DCMAKE_INSTALL_PREFIX="${{runner.workspace}}/install-libsbmlnetwork"

      - name: Build and Install libBMLNetwork
        working-directory: ${{runner.workspace}}/build-libsbmlnetwork
        shell: bash
        run: cmake --build . --target install --config $BUILD_TYPE

      - name: Test with pytest
        run: |
          python -m pip install pytest ipython
          python -m pip install ${{runner.workspace}}/install-libsbmlnetwork/lib/python/site-packages/libsbmlnetwork
          python -m pip install ${{runner.workspace}}/install-libsbmlnetwork/lib/python/site-packages/sbmlnetwork
          pytest ${{runner.workspace}}/install-libsbmlnetwork/lib/python/site-packages/sbmlnetwork/tests

      - name: Upload binary archives
        uses: actions/upload-artifact@v3
        with:
          name: binaries for ${{ matrix.platform }}
          path: ${{runner.workspace}}/install-libsbmlnetwork/*
          retention-days: 1
          if-no-files-found: error

  build_on_ManyLinux:
    name:
      Build on ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        platform: ["ubuntu-latest"]
        cpp_standard: [ 20 ]
        container: ["quay.io/pypa/manylinux2014_x86_64"]
    runs-on: ${{ matrix.platform }}
    container: ${{ matrix.container}}

    steps:
      - name: Checkout libsbml
        uses: actions/checkout@v3
        with:
          repository: sbmlteam/libsbml

      - name: install ccache from source
        run: |
          curl -L https://github.com/ccache/ccache/releases/download/v4.9.1/ccache-4.9.1.tar.gz > ccache.tar.gz
          tar -zxvf ccache.tar.gz
          mkdir ccache-build
          mkdir ccache-install
          cd ccache-build
          cmake -DCMAKE_INSTALL_PREFIX=../ccache-install -DCMAKE_BUILD_TYPE=$BUILD_TYPE ../ccache-4.9.1
          cmake --build . --target install --config $BUILD_TYPE
          echo "$GITHUB_WORKSPACE/ccache-install/bin" >> $GITHUB_PATH

      - name: install CMake using pip
        run: |
          /opt/python/cp38-cp38/bin/pip install cmake
          ln -s /opt/python/cp38-cp38/bin/cmake /usr/bin/cmake
          ln -s /opt/python/cp38-cp38/bin/ctest /usr/bin/ctest
          echo "/opt/python/cp38-cp38/bin/python3.8" >> $GITHUB_PATH

      - name: Install dependencies
        run: yum install -y libxml2-devel check-devel java-devel mono-devel

      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - name: Set ccache cache directory
        shell: bash
        run: |
          echo "CCACHE_DIR=${{runner.workspace}}/.ccache" >> "${GITHUB_ENV}"
          echo "COMPILER_LAUNCHER=ccache" >> "${GITHUB_ENV}"

      - name: Cache ccache files
        uses: actions/cache@v3
        with:
          path: ${{runner.workspace}}/.ccache
          key:
            ${{ runner.os }}-${{ steps.ccache_cache_timestamp.outputs.timestamp
            }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
            ${{ runner.os }}-

      - name: Create libsbml build directory
        run: |
          mkdir $GITHUB_WORKSPACE/build-libsbml

      - name: Configure CMake for libsbml
        working-directory: build-libsbml
        run: |
          cmake $GITHUB_WORKSPACE \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DCMAKE_C_COMPILER_LAUNCHER=${COMPILER_LAUNCHER} \
          -DCMAKE_CXX_COMPILER_LAUNCHER=${COMPILER_LAUNCHER} \
          -DCMAKE_CXX_STANDARD=${{matrix.cpp_standard}} \
          -DWITH_CHECK=True \
          -DWITH_LIBXML=ON \
          -DENABLE_LAYOUT="ON" \
          -DENABLE_RENDER="ON" \
          -DCMAKE_INSTALL_PREFIX="${{runner.workspace}}/install-libsbml"

      - name: Build and Install libsbml
        working-directory: build-libsbml
        run: cmake --build . --target install --config $BUILD_TYPE

      - name: Add libsbml install directory to path
        shell: bash
        run: |
          echo "${{runner.workspace}}/install-libsbml/lib64/cmake" >> $GITHUB_PATH

      - name: Checkout libBMLNetwork
        uses: actions/checkout@v3
        with:
          repository: adelhpour/libsbmlnetwork

      - name: install ccache from source
        run: |
          curl -L https://github.com/ccache/ccache/releases/download/v4.9.1/ccache-4.9.1.tar.gz > ccache.tar.gz
          tar -zxvf ccache.tar.gz
          mkdir ccache-build
          mkdir ccache-install
          cd ccache-build
          cmake -DCMAKE_INSTALL_PREFIX=../ccache-install -DCMAKE_BUILD_TYPE=$BUILD_TYPE ../ccache-4.9.1
          cmake --build . --target install --config $BUILD_TYPE
          echo "$GITHUB_WORKSPACE/ccache-install/bin" >> $GITHUB_PATH

      - name: Setup Python
        uses: actions/setup-python@v4

      - name: Create libBMLNetwork build directory
        run: |
          mkdir $GITHUB_WORKSPACE/build-libsbmlnetwork

      - name: Configure CMake for libBMLNetwork
        working-directory: build-libsbmlnetwork
        run: |
          cmake $GITHUB_WORKSPACE \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DCMAKE_C_COMPILER_LAUNCHER=${COMPILER_LAUNCHER} \
          -DCMAKE_CXX_COMPILER_LAUNCHER=${COMPILER_LAUNCHER} \
          -DCMAKE_CXX_STANDARD=${{matrix.cpp_standard}} \
          -DWITH_PYTHON="ON" \
          -DPYTHON_INSTALL_WITH_SETUP="ON" \
          -DCMAKE_INSTALL_PREFIX="${{runner.workspace}}/install-libsbmlnetwork"

      - name: Build and Install libBMLNetwork
        working-directory: build-libsbmlnetwork
        run: cmake --build . --target install --config $BUILD_TYPE

      - name: Test with pytest
        run: |
          python -m pip install pytest ipython
          python -m pip install ${{runner.workspace}}/install-libsbmlnetwork/lib/python/site-packages/libsbmlnetwork
          python -m pip install ${{runner.workspace}}/install-libsbmlnetwork/lib/python/site-packages/sbmlnetwork
          pytest ${{runner.workspace}}/install-libsbmlnetwork/lib/python/site-packages/sbmlnetwork/tests

      - name: Upload binary archives
        uses: actions/upload-artifact@v3
        with:
          name: binaries for ${{ matrix.container }}
          path: ${{runner.workspace}}/install-libsbmlnetwork/*
          retention-days: 1
          if-no-files-found: error